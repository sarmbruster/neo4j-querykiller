subprojects{

    apply plugin: "java"
    apply plugin: "groovy"
    apply plugin: 'idea'
    apply plugin: 'maven-publish'

//sourceCompatibility=JavaVersion.VERSION_1_7
//targetCompatibility=JavaVersion.VERSION_1_7

    ext {
        neo4jVersion = "2.0.0"
        jerseyVersion = "1.9"
    }


    version = "1.0.0-SNAPSHOT"
    group="org.neo4j.extension.querykiller"

    repositories {
        mavenCentral()
        //maven { url "http://m2.neo4j.org/content/repositories/releases/" }
        maven {url "https://raw.github.com/neo4j-contrib/m2/master/releases" }
    }

    dependencies {
        compile group: 'org.neo4j', name: 'neo4j-kernel', version: neo4jVersion
        compile group: 'org.neo4j', name: 'neo4j-lucene-index', version: neo4jVersion
        compile group: 'org.neo4j', name: 'server-api', version: neo4jVersion
        compile group: 'org.neo4j.app', name: 'neo4j-server', version: neo4jVersion
        testCompile group: 'org.neo4j.contrib', name: 'neo4j-spock-extension', version: '0.1'
        //testCompile group: 'com.sun.jersey', name: 'jersey-json', version: jerseyVersion  // make sure this jar is copied to neo4j as well
    }

    publishing {
       publications {
           mavenJava(MavenPublication) {
               from components.java
           }
       }
       repositories {
           maven {
   //            url "file://$buildDir/repo" // change to point to your repo, e.g. http://my.org/repo
               url '../m2/snapshots'  // TODO: externalize this
           }
       }
   }

}

//task wrapper(type: Wrapper) {
//    gradleVersion = '1.9'
//}


/*task checkNeo4jDirectory << {
    println "Build $buildDir"
    assert project.hasProperty("neo4jDirectory"), "use -Pneo4jDirectory=<neo4j directory> to specify target location"
}

task deployJar(type: Copy, dependsOn: [checkNeo4jDirectory, 'jar']) {
    // TODO: consider copying dependencies as well
    from jar // refering to output of jar task here
    into "$neo4jDirectory/plugins"
}

task deployConfig(dependsOn: "checkNeo4jDirectory") << {
    File configFile = file( "$neo4jDirectory/conf/neo4j-server.properties" )
    assert configFile.exists()

    Properties props = new Properties()
    props.load( configFile.newInputStream() )

    if ( !props.get( "org.neo4j.server.thirdparty_jaxrs_classes" ) )  {
        configFile.append( "# auto-added from querykiller's gradle build\n")
        configFile.append("org.neo4j.server.thirdparty_jaxrs_classes=org.neo4j.extension.querykiller=/querykiller\n" )

    } // TODO: consider amending existing thridparty_jaxrs_classes

    configFile = file( "$neo4jDirectory/conf/neo4j.properties" )
    assert configFile.exists()

    props = new Properties()
    props.load( configFile.newInputStream() )

    if ( !props.get( "execution_guard_enabled" ) )  {
        configFile.append( "# auto-added from querykiller's gradle build\n")
        configFile.append("execution_guard_enabled=true\n" )

    } // TODO: consider amending existing thridparty_jaxrs_classes

}

task deploy(dependsOn: [deployJar, deployConfig]) << {
}
*/