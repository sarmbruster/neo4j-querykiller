apply plugin: "java"
apply plugin: "groovy"
apply plugin: 'maven-publish'
apply plugin: "idea"
idea {
    project {
        ext.jdkName = '1.7'
        ext.languageLevel = '1.7'
    }
}

//sourceCompatibility=JavaVersion.VERSION_1_7
//targetCompatibility=JavaVersion.VERSION_1_7

repositories {
    mavenCentral()
    //maven { url "http://m2.neo4j.org/content/repositories/releases/" }
    maven { url "https://raw.github.com/neo4j-contrib/m2/master/releases" }
    //mavenLocal()
}

ext {
    neo4jVersion = "2.2.0"
    jerseyVersion = "1.18.1"
}

dependencies {
    compile group: 'org.neo4j', name: 'neo4j-kernel', version: neo4jVersion
    compile group: 'org.neo4j', name: 'neo4j-lucene-index', version: neo4jVersion
    compile group: 'org.neo4j', name: 'server-api', version: neo4jVersion
    compile group: 'org.neo4j.app', name: 'neo4j-server', version: neo4jVersion
    testCompile group: 'org.neo4j.contrib', name: 'neo4j-spock-extension', version: '0.5.2'
    //testCompile group: 'com.sun.jersey', name: 'jersey-json', version: jerseyVersion  // make sure this jar is copied to neo4j as well
}

archivesBaseName = "neo4j-querykiller-$project.name"

version = "1.0.0-SNAPSHOT"
group = "org.neo4j.extension.querykiller"


publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            //            url "file://$buildDir/repo" // change to point to your repo, e.g. http://my.org/repo
            url '../m2/snapshots'  // TODO: externalize this
        }
    }
}


/*
def neo4jExpandedDirectory

task checkNeo4jDirectory << {
    assert project.hasProperty("neo4jDirectory"), "use -Pneo4jDirectory=<neo4j directory> to specify target location"

    neo4jExpandedDirectory = neo4jDirectory.replace("~", System.env.HOME)

    def d = file(neo4jExpandedDirectory)
    assert d.exists(), "-Pneo4jDirectory set to non existent file"
    assert d.directory, "-Pneo4jDirectory not set to directory"

}

task deployJar(type: Copy, dependsOn: [checkNeo4jDirectory, 'jar']) << {
    // TODO: consider copying dependencies as well
    from jar.archivePath.absolutePath // refering to output of jar task here
    into "$neo4jExpandedDirectory/plugins"
}

task deployConfig(dependsOn: "checkNeo4jDirectory") << {
    File configFile = file( "$neo4jExpandedDirectory/conf/neo4j-server.properties" )
    assert configFile.exists()

    Properties props = new Properties()
    props.load( configFile.newInputStream() )

    if ( !props.get( "org.neo4j.server.thirdparty_jaxrs_classes" ) )  {
        configFile.append( "# auto-added from querykiller's gradle build\n")
        configFile.append("org.neo4j.server.thirdparty_jaxrs_classes=org.neo4j.extension.querykiller.server=/querykiller\n" )

    } // TODO: consider amending existing thridparty_jaxrs_classes

    configFile = file( "$neo4jExpandedDirectory/conf/neo4j.properties" )
    assert configFile.exists()

    props = new Properties()
    props.load( configFile.newInputStream() )

    if ( !props.get( "execution_guard_enabled" ) )  {
        configFile.append( "# auto-added from querykiller's gradle build\n")
        configFile.append("execution_guard_enabled=true\n" )

    } // TODO: consider amending existing thridparty_jaxrs_classes

}

task deploy(dependsOn: [deployJar, deployConfig]) << {
}
 */